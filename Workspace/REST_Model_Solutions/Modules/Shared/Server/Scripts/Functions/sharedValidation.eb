<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<ebase version="5.3.2">
            
    
    <script contentType="Javascript" dateCreated="2018-03-16T16:15:52.455Z" id="sharedValidation" preferredComponentPath="/Modules/Shared/Components/Header/header">
                        
        
        <scriptText>importPackage(com.ebasetech.xi.api);
importPackage(com.ebasetech.xi.services);

/*
 * This script gets field controls on the current page by their modifiers and validates the corresponding field value appropriately, if the field has a value.
 *
 * In order to more easily manipulate/analyse dates, the moment.js library is used in this script.
 * Therefore the moment script in Vault/shared/serverScripts must be included as a Shared Functions script on any form that uses this script
 *
 * For more information about moment.js: http://momentjs.com/
 */

//==============================================
// Validation flag - set true to signal to stop
//==============================================
var stopExecutionFlag = false;

//======================================================================
// Label cleaning regex - captures all characters up to the first * or :
//======================================================================
var cleanRegex = /([^*:]+)/;

////======================================
//// End here if not all fields are valid
////======================================
//if(stopExecutionFlag){
// event.owner.addErrorMessage("Please check the highlighted fields");
//}
//
//// but if they are all valid, display a message
//event.owner.addWarningMessage("All fields valid!");


function validateField(fieldOrControl) {
	var ctrl;

	if (fieldOrControl.elementType == "Field") {
		ctrl = fieldOrControl.getFieldControl();
	} else if (fieldOrControl.elementType == "Field Control") {
		ctrl = fieldOrControl;
	} else {
		log(fieldOrControl.elementName + " is not a field or field control");
		return;
	}

	if (ctrl.hasModifier("mandatory"))
		validateMandatory(ctrl);
	if (ctrl.hasModifier("phone"))
		validatePhone(ctrl);
	if (ctrl.hasModifier("email"))
		validateEmail(ctrl);
	if (ctrl.hasModifier("address"))
		validateAddress(ctrl);
	if (ctrl.hasModifier("postcode"))
		validatePostcode(ctrl);
	if (ctrl.hasModifier("name"))
		validateName(ctrl);
	if (ctrl.hasModifier("numeric"))
		validateNumeric(ctrl);
	if (ctrl.hasModifier("integer"))
		validateInteger(ctrl);
	if (ctrl.hasModifier("currency"))
		validateCurrency(ctrl);
	if (ctrl.hasModifier("dateFuture"))
		validateDateFuture(ctrl);
	if (ctrl.hasModifier("datePast"))
		validateDatePast(ctrl);
	if (ctrl.hasModifier("password"))
		validatePassword(ctrl);

	return !stopExecutionFlag;
}

function validateFields(fieldsOrControls) {
	if (fieldsOrControls &amp;&amp; fieldsOrControls.length) {
		for each(var a in fieldsOrControls) {
			validateField(a);
		}
	} else {
		validatePageControls();
	}

	return !stopExecutionFlag;
}

function validatePageControls() {
	//=====================
	// Check field formats
	//=====================

	//------------------
	// Mandatory fields
	//------------------
	var mandatoryFields = form.currentPage.getControlsByModifier("mandatory");
	for each(var ctrl in mandatoryFields) {
		validateMandatory(ctrl);
	}

	//--------------
	// Phone fields
	//--------------
	var phoneFields = form.currentPage.getControlsByModifier("phone");
	for each(var ctrl in phoneFields) {
		validatePhone(ctrl);
	}

	//--------------
	// Email fields
	//--------------
	var emailFields = form.currentPage.getControlsByModifier("email");
	for each(var ctrl in emailFields) {
		validateEmail(ctrl);
	}

	//----------------
	// Address fields
	//----------------
	var nameFields = form.currentPage.getControlsByModifier("address");
	for each(var ctrl in nameFields) {
		validateAddress(ctrl);
	}

	//-----------------
	// Postcode fields
	//-----------------
	var postcodeFields = form.currentPage.getControlsByModifier("postcode");
	for each(var ctrl in postcodeFields) {
		validatePostcode(ctrl);
	}

	//--------------
	// Name fields
	//--------------
	var nameFields = form.currentPage.getControlsByModifier("name");
	for each(var ctrl in nameFields) {
		validateName(ctrl);
	}

	//----------------------------
	// Numeric (character) fields
	//----------------------------
	var numericFields = form.currentPage.getControlsByModifier("numeric");
	for each(var ctrl in numericFields) {
		validateNumeric(ctrl);
	}

	//----------------------------
	// Integer (character) fields
	//----------------------------
	var numericFields = form.currentPage.getControlsByModifier("integer");
	for each(var ctrl in numericFields) {
		validateInteger(ctrl);
	}

	//----------------------------
	// Currency fields
	//----------------------------
	var numericFields = form.currentPage.getControlsByModifier("currency");
	for each(var ctrl in numericFields) {
		validateCurrency(ctrl);
	}

	//----------------------------
	// Future Date fields
	//----------------------------
	var futureDateFields = form.currentPage.getControlsByModifier("dateFuture");
	for each(var ctrl in futureDateFields) {
		validateDateFuture(ctrl);
	}

	//----------------------------
	// Past Date fields
	//----------------------------
	var pastDateFields = form.currentPage.getControlsByModifier("datePast");
	for each(var ctrl in pastDateFields) {
		validateDatePast(ctrl);
	}

	//----------------------------
	// Password fields
	//----------------------------
	var pastDateFields = form.currentPage.getControlsByModifier("password");
	for each(var ctrl in pastDateFields) {
		validatePassword(ctrl);
	}

	return !stopExecutionFlag;
}

function validateMandatory(ctrl) {
	if (ctrl.isShowing()) {
		if (!ctrl.getField().value) {
			ctrl.addErrorMessage(cleanLabel(ctrl) + " is required", false);
			stopExecutionFlag = true;
		}
	}
}

function validatePhone(ctrl) {
	if (ctrl.isShowing()) {
		var value = ctrl.getField().value;
		if (value) {
			//                var regex = /^(\()?(\+44-|\+44|0)([- 0-9\(\)]{10,16}?)$/; // for british phone numbers
			var regex = /^\+{1,2}[-\s0-9\(\)]{10,16}$/; // a more general regex for numbers of an appropriate length
			if (!regex.test(value)) {
				ctrl.addErrorMessage(cleanLabel(ctrl) + " is not a valid telephone number", false);
				stopExecutionFlag = true;
			}
		}
	}
}

function validateEmail(ctrl) {
	var value = ctrl;
	if (typeof ctrl == "object" &amp;&amp; ctrl.isShowing()) {
		value = ctrl.getField().value;
	}

	if (value) {
		var regex = /^(([^&lt;&gt;()[\]\\.,;:\s@\"]+(\.[^&lt;&gt;()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
		if (!regex.test(value)) {
			if (typeof ctrl == "object")
				ctrl.addErrorMessage(cleanLabel(ctrl) + " is not a valid email address", false);
			stopExecutionFlag = true;
		}
	}

	return !stopExecutionFlag;
}

function validateAddress(ctrl) {
	if (ctrl.isShowing()) {
		var value = ctrl.getField().value;
		if (value) {
			var regex = /^[A-Za-z0-9\-\., ]*$/;
			if (!regex.test(value)) {
				ctrl.addErrorMessage("Address lines can only contain alphabetic, numeric, hyphen, full-stop or comma characters", false);
				stopExecutionFlag = true;
			}
		}
	}
}

function validatePostcode(ctrl) {
	if (ctrl.isShowing()) {
		var value = ctrl.getField().value;
		if (value) {
			// To uppercase
			ctrl.getField().setValue(value.toUpperCase());
			// Remove spaces
			var value = value.replace(/\s/g, "");
			var regex = /^[A-Z]{1,2}[0-9]{1,2} ?[0-9][A-Z]{2}$/i;
			if (!regex.test(value)) {
				ctrl.addErrorMessage(cleanLabel(ctrl) + " is not a valid postcode", false);
				stopExecutionFlag = true;
			}
		}
	}
}

function validateName(ctrl) {
	if (ctrl.isShowing()) {
		var value = ctrl.getField().value;
		if (value) {
			var regex = /^[A-Za-z\-'\. ]*$/;
			if (!regex.test(value)) {
				ctrl.addErrorMessage(cleanLabel(ctrl) + " can only contain alphabetic, hyphen, full-stop or apostrophe characters", false);
				stopExecutionFlag = true;
			}
		}
	}
}

function validateNumeric(ctrl) {
	if (ctrl.isShowing()) {
		var value = ctrl.getField().value;
		if (value) {
			var regex = /^[0-9\.,]*$/;
			if (!regex.test(value)) {
				ctrl.addErrorMessage(cleanLabel(ctrl) + " can only contain numeric characters", false);
				stopExecutionFlag = true;
			}
		}
	}
}

function validateInteger(ctrl) {
	if (ctrl.isShowing()) {
		var value = ctrl.getField().value;
		if (value) {
			var regex = /^[0-9]*$/;
			if (!regex.test(value)) {
				ctrl.addErrorMessage(cleanLabel(ctrl) + " can only contain numeric characters", false);
				stopExecutionFlag = true;
			}
		}
	}
}

function validateCurrency(ctrl) {
	if (ctrl.isShowing()) {
		var value = ctrl.getField().value;
		if (value) {
			var regex = /^[0-9,]*(.[0-9]{2})?$/;
			if (!regex.test(value)) {
				ctrl.addErrorMessage(cleanLabel(ctrl) + " must be in currency format", false);
				stopExecutionFlag = true;
			}
		}
	}
}

function validateDateFuture(ctrl) {
	if (ctrl.isShowing()) {
		var value = ctrl.getField().value;
		if (value) {
			var today = new moment();
			value = moment(value);
			// if the value given is before today (to the precision of 1 day) this is an error
			if (value.isBefore(today, 'day')) {
				ctrl.addErrorMessage(cleanLabel(ctrl) + " must be a date in the future", false);
				stopExecutionFlag = true;
			}
		}
	}
}

function validateDatePast(ctrl) {
	if (ctrl.isShowing()) {
		var value = ctrl.getField().value;
		if (value) {
			var today = new moment();
			value = moment(value);
			// if the value given is after today (to the precision of 1 day) this is an error
			if (value.isAfter(today, 'day')) {
				ctrl.addErrorMessage(cleanLabel(ctrl) + " must be a date in the past", false);
				stopExecutionFlag = true;
			}
		}
	}
}

function validatePassword(ctrl) {
	if (ctrl.isShowing()) {
		var value = ctrl.getField().value;
		if (value) {
			// if the length of the string is less than 3 characters reject it
			if (value.length &lt; 3) {
				ctrl.addErrorMessage(cleanLabel(ctrl) + " must be at least 3 characters long", false);
				stopExecutionFlag = true;
			}
		}
	}
}

/**
 * cleanLabel(control)
 * When passed a control it returns the contents of the label up to * or : and with whitespace trimmed
 * If the regex does not return a capture group the whole label is returned without being cleaned
 */
function cleanLabel(ctrl) {
	var label = ctrl.field.labelText.text;

	var regexMatches = label.match(cleanRegex);
	if (regexMatches.length &gt; 0) {
		return regexMatches[0].trim();
	} else {
		return label;
	}
}
</scriptText>
                    
    
    </script>
        

</ebase>
